on:
  workflow_call:
    inputs:
      cmake_build_type:
        description: 'Value for CMAKE_BUILD_TYPE'
        type: string
        default: Release
        required: true

      add_cmake_cfg_args:
        description: 'Additional arguments for configuration step'
        required: false
        type: string

      branch_name:
        description: 'Branch to checkout when tests are manually triggered'
        required: false
        type: string

# job
jobs:
  ci:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.os }}

    # Launch a matrix of jobs
    strategy:
        fail-fast: false
        matrix:
            os: [ubuntu-20.04,macos-12]
            pointmap: [on,off]
            scotch: [on,off]
            mpich-instead-openmpi: [on,off]

    steps:
      - name: Print options and set environment variables
        run: |
          echo "${{ github.event.inputs.name }}:
            Os:      ${{ matrix.os }},
            Pointmap:${{ matrix.pointmap }},
            Scotch:  ${{ matrix.scotch }},
            Mpich instead of openmpi: ${{ matrix.mpich-instead-openmpi }},
            Build:   ${{ inputs.cmake_build_type }}"

          # gfortran compiler and scotch makefile depends on the os
          if [ "$RUNNER_OS" == "macOS" ]; then
             echo "SCOTCH_MAKE=Make.inc/Makefile.inc.i686_mac_darwin10" >> "$GITHUB_ENV"
             echo "FORT_FLG=\"-DCMAKE_Fortran_COMPILER=gfortran-11\"" >> "$GITHUB_ENV"

          elif [ "$RUNNER_OS" == "Linux" ]; then
             echo "SCOTCH_MAKE=Make.inc/Makefile.inc.x86-64_pc_linux2" >> "$GITHUB_ENV"
             echo "FORT_FLG=\"-DCMAKE_Fortran_COMPILER=gfortran-9\"" >> "$GITHUB_ENV"
          fi
          echo "NJOBS=$NJOBS" >> "$GITHUB_ENV"
          # Remark: variable values are still empty inside this context

        shell: bash
        env:
          NJOBS: "1"

      - name: Install MPICH
        # Download mpich
        if: matrix.mpich-instead-openmpi == 'on'
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install mpich
          elif [ "$RUNNER_OS" == "Linux" ]; then
            sudo sed -i 's/azure\.//' /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y libmpich-dev
          fi

      - name: Install OpenMPI
        if: matrix.mpich-instead-openmpi == 'off'
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install open-mpi
          elif [ "$RUNNER_OS" == "Linux" ]; then
            sudo sed -i 's/azure\.//' /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y libopenmpi-dev
          fi

      - name: Install Sctoch
        # Download scotch only if used
        if: matrix.scotch == 'on'
        run: |
          git clone https://gitlab.inria.fr/scotch/scotch.git
          cd scotch
          git checkout v6.1.3
          cd src
          cp ${{ env.SCOTCH_MAKE }} Makefile.inc
          make scotch -j ${{ env.NJOBS }}
          make install scotch -j ${{ env.NJOBS }}

      # checkout the provided branch name if workflow is manually run
      - uses: actions/checkout@v3
        if: inputs.branch_name
        with:
          ref: ${{github.event.inputs.branch}}
          path: ParMmg

      # checkout the event branch for automatic workflows
      - uses: actions/checkout@v3
        if: inputs.branch_name == ''
        with:
          path: ParMmg

      - name: Test compilation with shared libs linkage
        run: |
          cmake -SParMmg -Bbuild_shared -DCI_DIR=~/testparmmg \
          ${{ env.C_FLG }} \
          ${{ env.FORT_FLG }} \
            -DBUILD_TESTING=ON \
            -DCMAKE_BUILD_TYPE=${{ inputs.cmake_build_type }} \
            -DUSE_POINTMAP=${{ matrix.pointmap }} \
            -DUSE_SCOTCH=${{ matrix.scotch }} \
            -DSCOTCH_DIR=scotch \
            -DBUILD_SHARED_LIBS=ON \
            ${{ inputs.add_cmake_cfg_args }}
            cmake --build build_shared --config ${{ inputs.cmake_build_type }} -j ${{ env.NJOBS }}
        shell: bash

      - name: Configure Mmg with static libs (default behaviour)
        run: |
          cmake -SParMmg -Bbuild -DCI_DIR=~/testparmmg\
          ${{ env.C_FLG }} \
          ${{ env.FORT_FLG }} \
            -DBUILD_TESTING=ON \
            -DCMAKE_BUILD_TYPE=${{ inputs.cmake_build_type }} \
            -DUSE_POINTMAP=${{ matrix.pointmap }} \
            -DUSE_SCOTCH=${{ matrix.scotch }} \
            -DSCOTCH_DIR=scotch \
            ${{ inputs.add_cmake_cfg_args }}
        shell: bash

      - name: Build ParMmg
        run: |
          cmake --build build --config ${{ inputs.cmake_build_type }} -j ${{ env.NJOBS }}

      - name: Install ParMmg
        run: |
          sudo cmake --build build --target install --config ${{ inputs.cmake_build_type }} -j ${{ env.NJOBS }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ParMmg-bin
          path: |
            build/bin

      - name: Test ParMmg
        run: |
          cd build
          ctest --timeout 7200 -VV -C ${{ inputs.cmake_build_type }}

      # - name: Archive production artifacts for tests
      #  if: success() || failure()
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: ParMmg-tests
      #    path: |
      #      build/TEST_OUTPUTS
